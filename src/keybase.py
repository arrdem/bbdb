"""
A quick and shitty keybase driver.
"""

import requests
import retrying

from collections import namedtuple


class APIException(Exception):
  """A base class for exceptions from the keybase API."""


class NoSuchUserException(APIException):
  """Exception raised when no such user exists."""


class APIStatusException(APIException):
  """Exception raised when you get a non-zero status back."""

class Status(namedtuple('Status', ['code', 'name', 'desc', 'fields'])):
  """
  A namedtuple for the Keybase status code structure.

  Most API calls generate 2XX outcomes which contain a status payload which needs to be parsed.
  """

  def __new__(cls, code, name, desc=None, fields=None):
    return super().__new__(cls, code, name, desc, fields)

  def __bool__(self):
    """We fake the treatment of boolean status to indicate total success only."""
    return self.code == 0

  @classmethod
  def from_json(cls, json):
    return cls(**json)


class Proof(namedtuple('Proof', ['proof_type', 'nametag', 'state', 'proof_url', 'sig_id', 'proof_id',
                                 'human_url', 'service_url', 'presentation_group',
                                 'presentation_tag'])):
  """
  Namedtuple structure packaging the proof records generated by keybase.
  """

  @classmethod
  def from_json(cls, json):
    return cls(**json)


class User(namedtuple('User', ['id', 'username', 'basics', 'profile', 'public_keys', 'proofs'])):
  """
  Namedtuple structure packaging the user representation exposed by keybase.
  """

  @classmethod
  def from_json(cls, json):
    try:
      return User(json['id'], json["basics"]["username"], json["basics"], json.get("profile", {}),
                  json.get("public_keys", {}).get("all_bundles"),
                  [Proof.from_json(blob) for blob in json.get("proofs_summary", {}).get("all", [])])
    except KeyError as e:
      print(json)
      raise e

  def _get_proof(self, k):
    for p in self.proofs:
      if p.proof_type == k:
        return p

  @property
  def hackernews(self):
    return self._get_proof("hackernews")

  @property
  def github(self):
    return self._get_proof("github")

  @property
  def twitter(self):
    return self._get_proof("twitter")

  @property
  def reddit(self):
    return self._get_proof("reddit")

  @property
  def homepage(self):
    return self._get_proof("generic_web_site")


class Api(object):
  def __init__(self, url="https://keybase.io/_/API/1.0"):
    self._url = url
    self._s = requests.Session()

  @retrying.retry(wait_random_min=1000,
                  wait_random_max=3000,
                  stop_max_attempt_number=5,
                  retry_on_exception=lambda ex: isinstance(ex, (APIStatusException,)))
  def get_users(self, one=False, **kwargs):
    """Fetch a user by ID from the Keybase API."""

    _supported_requests=['username', 'twitter', 'github', 'reddit', 'hackernews']
    assert any(k in kwargs for k in _supported_requests)

    body = self._s.get(self._url + "/user/lookup.json", params=kwargs).json()
    status = Status.from_json(body["status"])
    if not status:
      print(kwarsg, status)
      raise APIStatusException(status.name)
    else:
      them = body["them"]
      if one and them and isinstance(them, list):
        them = them[0]

      if isinstance(them, list):
        if them:
          return list(map(User.from_json, them))
        else:
          raise NoSuchUserException()
      else:
        return User.from_json(them)
